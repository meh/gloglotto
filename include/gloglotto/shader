/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of gloglotto - https://github.com/meh/gloglotto
 *
 * gloglotto is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * gloglotto is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with gloglotto. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _GLOGLOTTO_SHADER_H
#define _GLOGLOTTO_SHADER_H

#include <string>
#include <map>
#include <vector>
#include <typeinfo>

#include <gloglotto/math>
#include <gloglotto/exception>

namespace gloglotto
{
	class shader final
	{
		public:
			template <typename Function>
			shader (std::map<std::string, std::string> source, Function lambda);

			~shader (void);

			template <typename ...Args>
			void call (Args... args);

			void uniform (std::string name, float data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, int data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, unsigned int data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, bool data) throw (invalid_operation, invalid_value);

			void uniform (std::string name, vector<1, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<2, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<3, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<4, float> data) throw (invalid_operation, invalid_value);

			void uniform (std::string name, vector<1, int> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<2, int> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<3, int> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<4, int> data) throw (invalid_operation, invalid_value);

			void uniform (std::string name, vector<1, unsigned int> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<2, unsigned int> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<3, unsigned int> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<4, unsigned int> data) throw (invalid_operation, invalid_value);

			void uniform (std::string name, vector<1, bool> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<2, bool> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<3, bool> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, vector<4, bool> data) throw (invalid_operation, invalid_value);

			void uniform (std::string name, matrix<2, 2, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, matrix<3, 3, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, matrix<4, 4, float> data) throw (invalid_operation, invalid_value);

			void uniform (std::string name, matrix<2, 3, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, matrix<3, 2, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, matrix<2, 4, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, matrix<4, 2, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, matrix<3, 4, float> data) throw (invalid_operation, invalid_value);
			void uniform (std::string name, matrix<4, 3, float> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<1, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<2, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<3, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<4, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<1, int>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<2, int>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<3, int>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<4, int>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<1, unsigned int>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<2, unsigned int>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<3, unsigned int>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<4, unsigned int>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<1, bool>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<2, bool>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<3, bool>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, vectors<Size, vector<4, bool>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, matrices<Size, matrix<2, 2, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, matrices<Size, matrix<3, 3, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, matrices<Size, matrix<4, 4, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, matrices<Size, matrix<2, 3, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, matrices<Size, matrix<3, 2, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, matrices<Size, matrix<2, 4, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, matrices<Size, matrix<4, 2, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, matrices<Size, matrix<3, 4, float>> data) throw (invalid_operation, invalid_value);

			template <int Size>
			void uniform (std::string name, matrices<Size, matrix<4, 3, float>> data) throw (invalid_operation, invalid_value);

		private:
			unsigned int _id;

			const std::type_info* _signature;
			void*                 _function;

			std::map<std::string, std::string> _source;
	};
}

#include <gloglotto/shader.tpp>

#endif
