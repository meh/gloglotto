/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of gloglotto - https://github.com/meh/gloglotto
 *
 * gloglotto is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * gloglotto is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with gloglotto. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _GLOGLOTTO_LIGHT_H
#define _GLOGLOTTO_LIGHT_H

#include <GL/glew.h>
#include <GL/gl.h>
#include <GL/glut.h>

#include <string>
#include <map>
#include <vector>
#include <stdexcept>
#include <functional>

#include <gloglotto/math>
#include <gloglotto/exception>

namespace gloglotto
{
	/* Exception thrown when a shader compilation fails.
	 */
	class failed_compilation : public exception
	{
		public:
			explicit failed_compilation (const std::string& what_arg) : exception(what_arg) { }
			explicit failed_compilation (const char* what_arg) : exception(what_arg) { }
	};

	/* Exception thrown when shader program linking fails.
	 */
	class failed_linking : public exception
	{
		public:
			explicit failed_linking (const std::string& what_arg) : exception(what_arg) { }
			explicit failed_linking (const char* what_arg) : exception(what_arg) { }
	};

	/* Thin wrapper around the OpenGL API.
	 */
	namespace thin
	{
		namespace window
		{
			void create (int* argc, char* argv[],
			             std::map<std::string, std::vector<int>> attributes,
			             std::string name) throw (std::invalid_argument);

			void loop (void);
			void loop (std::function<void(void)> setup);

			namespace callbacks
			{
				void resize (int width, int height);
				void render (void);
			}

			template <typename Function>
			void callback (std::string name, Function lambda);
		}

		namespace extensions
		{
			void setup (void) throw (exception);
		}

		void viewport (int width, int height);
		void viewport (int x, int y, int width, int height);

		namespace buffers
		{
			void swap (void);

			enum class clear : unsigned int
			{
				color        = GL_COLOR_BUFFER_BIT,
				depth        = GL_DEPTH_BUFFER_BIT,
				accumulation = GL_ACCUM_BUFFER_BIT,
				stencil      = GL_STENCIL_BUFFER_BIT
			};

			inline constexpr clear
			operator | (enum clear a, enum clear b)
			{
				return static_cast<clear>(static_cast<unsigned int>(a) | static_cast<unsigned int>(b));
			}

			void clear (enum clear mask) throw (invalid_value, invalid_operation);
			void clear (enum clear mask, float red, float green, float blue, float alpha) throw (invalid_value, invalid_operation);
			void clear (enum clear mask, float red, float green, float blue) throw (invalid_value, invalid_operation);
			void clear (enum clear mask, double depth) throw (invalid_value, invalid_operation);
			void clear (enum clear mask, float index) throw (invalid_value, invalid_operation);
			void clear (enum clear mask, int index) throw (invalid_value, invalid_operation);
		}

		namespace program
		{
			namespace shader
			{
				unsigned int create (unsigned int value) throw (invalid_enum, invalid_operation);
				void         destroy (unsigned int id) throw (invalid_value, invalid_operation);
				unsigned int load (unsigned int id, std::string source) throw (invalid_value, invalid_operation);
				unsigned int compile (unsigned int id) throw (invalid_value, invalid_operation, failed_compilation);
				unsigned int make (unsigned int value, std::string source) throw (failed_compilation);

				void attach (unsigned int program, unsigned int shader) throw (invalid_value, invalid_operation);
				void detach (unsigned int program, unsigned int shader) throw (invalid_value, invalid_operation);
			}

			namespace uniform
			{
				int location (unsigned int program, std::string name);

				void set (int location, vector<1, float> data) throw (invalid_operation, invalid_value);
				void set (int location, vector<2, float> data) throw (invalid_operation, invalid_value);
				void set (int location, vector<3, float> data) throw (invalid_operation, invalid_value);
				void set (int location, vector<4, float> data) throw (invalid_operation, invalid_value);

				void set (int location, vector<1, int> data) throw (invalid_operation, invalid_value);
				void set (int location, vector<2, int> data) throw (invalid_operation, invalid_value);
				void set (int location, vector<3, int> data) throw (invalid_operation, invalid_value);
				void set (int location, vector<4, int> data) throw (invalid_operation, invalid_value);

				void set (int location, matrix<2, 2, float> data) throw (invalid_operation, invalid_value);
				void set (int location, matrix<3, 3, float> data) throw (invalid_operation, invalid_value);
				void set (int location, matrix<4, 4, float> data) throw (invalid_operation, invalid_value);

				void set (int location, matrix<2, 3, float> data) throw (invalid_operation, invalid_value);
				void set (int location, matrix<3, 2, float> data) throw (invalid_operation, invalid_value);
				void set (int location, matrix<2, 4, float> data) throw (invalid_operation, invalid_value);
				void set (int location, matrix<4, 2, float> data) throw (invalid_operation, invalid_value);
				void set (int location, matrix<3, 4, float> data) throw (invalid_operation, invalid_value);
				void set (int location, matrix<4, 3, float> data) throw (invalid_operation, invalid_value);
			}

			unsigned int make (std::map<std::string, std::string> source) throw (invalid_operation, failed_linking);
			unsigned int make (std::map<std::string, unsigned int> id) throw (invalid_operation, failed_linking);
			void         destroy (unsigned int program);

			void bind (unsigned int program, unsigned int index, std::string name);
		}

		namespace error
		{
			unsigned int code (void);
			std::string  string (unsigned int code);
		}
	}
}

#include <gloglotto/thin.tpp>

#endif
